extends ../layout
include ../mixins/_spell_dropdown
include ../mixins/_spell_form

block content

    .l-margin--7
    .l-divider
        .c-divider__left
            h1 Spell Compendium
        .c-divider__right

    .l-main-content
        .l-search
            form.c-search(action='')
                .c-search__input
                    label(for='name') Spell name
                    input(type='text' name='name' placeholder='Buscar spell por nombre' disabled)
                .c-search__input
                    label(for='level') Spell level
                    input(type='text' name='level' placeholder='Buscar spell por nivel' disabled)
                .c-search__input
                    label(for='school') Spell school
                    input(type='text' name='school' placeholder='Buscar spell por escuela' disabled)
                .c-search__input--button
                    button.c-button--large.m-background-lightgray(type='' disabled) Buscar
        
        .l-margin--2
        .l-ability-points-grid.grid--5
            div
            button.c-button--large.m-clickable.js-modalbutton(type='button' data-for-modal='0') Create Spell
            div
            button.c-button--large.m-clickable.js-modalbutton(type='button' data-for-modal='1') Edit Spell
            div
        
    .l-margin--3
    .l-main-content
        table.l-spells
            each spell in spells
                - console.log(spell)
                tr.c-spell.c-spell--display.m-clickable
                    td
                        img.c-spell__image(src=`/images/icons/schools/${spell.school.toLowerCase()}.png` alt=`${spell.school} school image`)
                    - const spellLevelDict = {'cantrip': 'Cantrip', 'level1': '1st', 'level2': '2nd', 'level3': '3rd', 'level4': '4th', 'level5': '5th', 'level6': '6th', 'level7': '7th', 'level8': '8th', 'level9': '9th'};
                    td.m-color-lightgray= spellLevelDict[spell.level]
                    td= spell.name
                        - const components = spell.components.map(component => { switch(component){ case'verbal': return 'V';break; case'somatic': return'S';break; default: return'M';break; } });
                        p.m-color-lightgray= `${spell.school} • ${components}`
                    td= spell.casting_time
                    td= spell.duration
                    td= spell.range
                    td.c-dropdown-button &nabla;
                tr
                    +spellDropdown(spell, 'display')

    //- Modal Section
    .c-modalbg(data-modal='1')
        .c-modal
            .c-modal__header
                h2 Edit Spell
                p.m-clickable.js-closemodal(data-close-modal='1') &times;
            .c-modal__main
                .l-select-button
                    select(name='search_spell' id='js-search_spell')
                        option(value='-1' selected) - select -
                            each level in sortedSpells
                                if (level[0] != undefined)
                                    - const currLvl = level[0].level;
                                    if (currLvl == 'cantrip')
                                        - let levelName = `${currLvl[0].toUpperCase() + currLvl.substring(1)}`;
                                        optgroup(label=levelName)
                                    else
                                        - let levelName = `${currLvl[0].toUpperCase() + currLvl.substring(1, currLvl.length-1) + ' ' + currLvl.substring(currLvl.length-1)}`;
                                        optgroup(label=levelName)
                                    each spell in level
                                        if (spell instanceof Object)
                                            option(value=`${spell.level},${spell._id}`) #{spell.name}
                    button.c-button#js-searchspell(type='button' onclick=`loadSpell(${JSON.stringify(sortedSpells)})`) Find
                form.c-edithero-form(action=`/users/${username}/editSpell` method='post')
                    input(type="hidden" name='spell_id' id='spell_id')
                    #js-spellform
                        .l-margin--2
                        +spellForm()
                    .l-margin--2
                    .c-edithero-form__input
                        button.c-button(type='submit' id='save_changes') Save changes

    .c-modalbg(data-modal='0')
        .c-modal
            .c-modal__header
                h2 New Spell
                p.m-clickable.js-closemodal(data-close-modal='0') &times;
            .c-modal__main
                form.c-edithero-form(action=`/users/${username}/savespell` method='post')
                    +spellForm()
                    .l-margin--2
                    .c-edithero-form__input
                        button.c-button(type='submit') Add Spell
    
    script.
        // Sets up modals
        function setupModals() {
            document.querySelectorAll('.js-modalbutton').forEach(button => {
                button.addEventListener('click', () => {
                    const buttonNumber = button.dataset.forModal;
                    const modals = document.querySelectorAll('.c-modalbg');
                    const modalToActivate = document.querySelector(`.c-modalbg[data-modal='${buttonNumber}']`);

                    modals.forEach(modal => modal.classList.remove('c-modalbg--active'));

                    modalToActivate.classList.add('c-modalbg--active');
                });
            });

            document.querySelectorAll('.js-closemodal').forEach(button => {
                button.addEventListener('click', () => {
                    const buttonNumber = button.dataset.closeModal;
                    const modalToClose = document.querySelector(`.c-modalbg[data-modal='${buttonNumber}']`);

                    if(document.querySelector('#js-spellform') != null) document.querySelector('#js-spellform').style.display = 'none';
                    if(document.querySelector('#save_changes') != null) document.querySelector('#save_changes').style.display = 'none';

                    modalToClose.classList.remove('c-modalbg--active');
                });
            });

            window.addEventListener('click', e => {
                document.querySelectorAll('.c-modalbg').forEach(modal => {
                    if(e.target == modal) {
                        if(document.querySelector('#js-spellform') != null) document.querySelector('#js-spellform').style.display = 'none';
                        if(document.querySelector('#save_changes') != null) document.querySelector('#save_changes').style.display = 'none';
                        
                        modal.classList.remove('c-modalbg--active');
                    }
                });
            });
        };

        // Sets up spell tables
        function setupSpellTables(){
            const spellBar = document.querySelectorAll('.c-spell');
            const dropdownButton = document.querySelectorAll('.c-dropdown-button');
            const spellDescription = document.querySelectorAll('.c-spell-description');

            spellBar.forEach((element, index) => {
                element.addEventListener('click', () => {
                    
                    spellDescription[index].style.display === '' || spellDescription[index].style.display === 'none'
                        ? spellDescription[index].style.display = 'table-cell'
                        : spellDescription[index].style.display = 'none';
                    
                    
                    dropdownButton[index].innerHTML === '∇'
                        ? dropdownButton[index].innerHTML = '&Delta;'
                        : dropdownButton[index].innerHTML = '&nabla;';
                });
            });
        };

        // Loads spell onto edit modal
        function loadSpell(spells) {
            const spellSelect = document.getElementById('js-search_spell');
            const spellInfo = spellSelect.options[spellSelect.selectedIndex].value.split(',');

            let spellLookup = [];
            let spell = {};
            
            if(spellInfo.length != 2) return;

            document.querySelector('#js-spellform').style.display = 'block';
            document.querySelector('#save_changes').style.display = 'inline-block';

            switch(spellInfo[0]) {
                case 'cantrip':
                    spellLookup = spells[0];
                    break;
                case 'level1':
                case 'level2':
                case 'level3':
                case 'level4':
                case 'level5':
                case 'level6':
                case 'level7':
                case 'level8':
                case 'level9':
                    const index = parseInt(spellInfo[0].substring(5))
                    spellLookup = spells[index];
                    break;
                default:
                    break;
            }

            for(let i = 0; i < spellLookup.length; i++) {
                if(spellInfo[1] == spellLookup[i]._id) spell = spellLookup[i];
            }

            const idField = document.getElementById('spell_id');
            idField.value = spell._id;

            const name = document.getElementById('name');
            name.value = spell.name;

            const level = document.getElementById('level');
            let lvlIdx = -1;
            (spell.level === 'cantrip')
                ? lvlIdx = 0
                : lvlIdx = parseInt(spell.level.substring(5));
            level.selectedIndex = `${lvlIdx}`;

            const school = document.getElementById('school');
            let schIdx = -1;
            switch(spell.school) {
                case 'Abjuration':
                    schIdx = 1;
                    break;
                case 'Conjuration':
                    schIdx = 2;
                    break;
                case 'Divination':
                    schIdx = 3;
                    break;
                case 'Enchantment':
                    schIdx = 4;
                    break;
                case 'Evocation':
                    schIdx = 5;
                    break;
                case 'Illusion':
                    schIdx = 6;
                    break;
                case 'Necromancy':
                    schIdx = 7;
                    break;
                case 'Transmutation':
                    schIdx = 8;
                    break;
                default:
                    break;
            }
            school.selectedIndex = `${schIdx}`;

            const ritual = document.getElementById('ritual');
            let ritIdx = -1;
            spell.ritual
                ? ritIdx = 1
                : ritIdx = 0;
            ritual.selectedIndex = `${ritIdx}`;
            
            const castingTime = document.getElementById('casting_time');
            castingTime.value = spell.casting_time;

            const range = document.getElementById('range');
            range.value = spell.range;
            
            const vComp = document.getElementById('components.verbal');
            const sComp = document.getElementById('components.somatic');
            const mComp = document.getElementById('components.material');
            let vFlag = false, sFlag = false, mFlag = false;
            for(let i = 0; i < spell.components.length; i++) {
                if(spell.components[i] === 'verbal') vFlag = true;
                if(spell.components[i] === 'somatic') sFlag = true;
                if(spell.components[i] === 'material') mFlag = true;
            }
            vComp.checked = vFlag;
            sComp.checked = sFlag;
            mComp.checked = mFlag;
            
            const materials = document.getElementById('materials');
            materials.value = spell.materials;
            
            const duration = document.getElementById('duration');
            duration.value = spell.duration;
            
            const description = document.getElementById('description');
            description.value = spell.description;
        };

        document.addEventListener('DOMContentLoaded', () => {
            setupModals();
            setupSpellTables();
        });