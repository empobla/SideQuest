Initial Setup:
    express . --view=pug
    npm install
    npm i --save-dev nodemon

    In package.json:
        "devstart": "nodemon ./bin/www" under "scripts".

    npm run devstart

Dependencies:
    Data:
        mongodb
        mongoose    // Connector for mongodb in nodejs

    Media:
        cloudinary
        multer  // Handles enctype="multipart/form-data"
    
    Production:
        compression // Compresses files and optimizes for user use
        helmet  // Secures website data

    Users:
        dotenv  // Allows .env files and usage through process.env.VAR for delicate data
        express-session // Handles sessions
        express-validator   // Validates user info and sanitizes user info
        connect-mongo   // MongoDB session store
        
        mongoose-bcrypt // Hashes and salts passwords
        passport    // Authenticates passwords and info through strategies
        passport-local  // Local strategy for passport
        passport-local-mongoose // Local strategy for mongoose passport

    Flash messages:
        connect-flash   // Provides methods for flash messages
    
    

Files:
    In app.js:
        First Line:
            require('dotenv').config();

        Requires (Top):
            const MongoClient = require('mongodb').MongoClient;
            const mongoose = require('mongoose');
            const compression = require('compression');
            const helmet = require('helmet');

            // For sessions
            const session = require('express-session');
            const MongoStore = require('connect-mongo')(session);

            // For messages
            const flash = require('connect-flash');

            // For passport.js
            const User = require('./models/user');
            const passport = require('passport');

        Database (before app.use()):
            // Setup mongoose connection
            const connectMongo = async () => {
                await mongoose.connect(process.env.DB, {
                    useNewUrlParser: true,
                    useUnifiedTopology: true,
                    useFindAndModify: false
                });
            }
            connectMongo();
            mongoose.Promise = global.Promise;
            mongoose.set('useCreateIndex', true); // Because of deprecation of ensureIndex

            // DB Connection Error Detection
            const db = mongoose.connection;
            db.on('error', console.error.bind(console, 'connection error:'));
            db.once('open', function() {
                console.log('Connected to DB');
            });
        
        Middleware (app.use()):
            // Set up helmet middleware
            app.use(helmet());  // Should be as early as possible

            // Compress responses
            app.use(compression());

            // Set up session middleware
            app.use(session({
                secret: process.env.SECRET,
                saveUninitialized: false,
                resave: false,
                store: new MongoStore({ mongooseConnection: mongoose.connection })
            }));

            // Configure Passport Middleware
            app.use(passport.initialize());
            app.use(passport.session());

            passport.use(User.createStrategy());

            passport.serializeUser(User.serializeUser());
            passport.deserializeUser(User.deserializeUser());

            // Flash messages
            app.use(flash());

            // Custom Middleware
            app.use((req, res, next) => {
                res.locals.user = req.user;
                res.locals.url = req.path;
                res.locals.flash = req.flash();
                next();
            });
    
    In package.json:
        At the end:
            "engines": {
                "node": "14.5.0" (node version)
            }



New .env file

HEROKU:
1. git init
2. add package.json engines line
3. make .gitignore
4. git status
4.1. git add .
5. git commit -m 'Initial commit'
6. heroku login
7. heroku git:remote -a sidequestdnd
8. git push heroku master
9. heroku open